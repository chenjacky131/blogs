常用函数
----------

by jacky at 2018/11/14

#### 1.判断类型函数
```javascript
    function m_isString(obj){
      return Object.prototype.toString.call(obj) === '[object String]';
    }
    function m_isNumber(obj){
      return Object.prototype.toString.call(obj) === '[object Number]';
    }
    function m_isBoolean(obj){
      return Object.prototype.toString.call(obj) === '[object Boolean]';
    }
    function m_isUndefined(obj){
      return Object.prototype.toString.call(obj) === '[object Undefined]';
    }
    function m_isNull(obj){
      return Object.prototype.toString.call(obj) === '[object Null]';
    }
    function m_isFunction(obj){
      return Object.prototype.toString.call(obj) === '[object Function]';
    }
    function m_isArray(obj){
      return Object.prototype.toString.call(obj) === '[object Array]';
    }
    function m_isObject(obj){
      return Object.prototype.toString.call(obj) === '[object Object]';
    }
    function m_isType(type){// 以上函数的组合版
      return function(obj){
        return Object.prototype.toString.call(obj) === '[object ' + type + ']';
      }
    }
    // var isArray = m_isType('Array'); isArray([]) === true;
````
#### 2.base64加密解密
```javascript
function Base64() {

  // private property  
  _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

  // public method for encoding  
  this.encode = function (input) {
    var output = "";
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var i = 0;
    input = _utf8_encode(input);
    while (i < input.length) {
      chr1 = input.charCodeAt(i++);
      chr2 = input.charCodeAt(i++);
      chr3 = input.charCodeAt(i++);
      enc1 = chr1 >> 2;
      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
      enc4 = chr3 & 63;
      if (isNaN(chr2)) {
        enc3 = enc4 = 64;
      } else if (isNaN(chr3)) {
        enc4 = 64;
      }
      output = output +
        _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
        _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
    }
    return output;
  }

  // public method for decoding  
  this.decode = function (input) {
    var output = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    while (i < input.length) {
      enc1 = _keyStr.indexOf(input.charAt(i++));
      enc2 = _keyStr.indexOf(input.charAt(i++));
      enc3 = _keyStr.indexOf(input.charAt(i++));
      enc4 = _keyStr.indexOf(input.charAt(i++));
      chr1 = (enc1 << 2) | (enc2 >> 4);
      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
      chr3 = ((enc3 & 3) << 6) | enc4;
      output = output + String.fromCharCode(chr1);
      if (enc3 != 64) {
        output = output + String.fromCharCode(chr2);
      }
      if (enc4 != 64) {
        output = output + String.fromCharCode(chr3);
      }
    }
    output = _utf8_decode(output);
    return output;
  }

  // private method for UTF-8 encoding  
  _utf8_encode = function (string) {
    string = string.replace(/\r\n/g, "\n");
    var utftext = "";
    for (var n = 0; n < string.length; n++) {
      var c = string.charCodeAt(n);
      if (c < 128) {
        utftext += String.fromCharCode(c);
      } else if ((c > 127) && (c < 2048)) {
        utftext += String.fromCharCode((c >> 6) | 192);
        utftext += String.fromCharCode((c & 63) | 128);
      } else {
        utftext += String.fromCharCode((c >> 12) | 224);
        utftext += String.fromCharCode(((c >> 6) & 63) | 128);
        utftext += String.fromCharCode((c & 63) | 128);
      }

    }
    return utftext;
  }

  // private method for UTF-8 decoding  
  _utf8_decode = function (utftext) {
    var string = "";
    var i = 0;
    var c = c1 = c2 = 0;
    while (i < utftext.length) {
      c = utftext.charCodeAt(i);
      if (c < 128) {
        string += String.fromCharCode(c);
        i++;
      } else if ((c > 191) && (c < 224)) {
        c2 = utftext.charCodeAt(i + 1);
        string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
        i += 2;
      } else {
        c2 = utftext.charCodeAt(i + 1);
        c3 = utftext.charCodeAt(i + 2);
        string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
        i += 3;
      }
    }
    return string;
  }
}
// 用法：
// var base = new Base64();
// base.encode(string);
// base.decode(encodestring);
````

#### 3.函数柯里化(function currying)
```javascript
      var currying  = function(fn){
        var args = [];
        return function(){
          if (arguments.length == 0) {
            return fn.apply(this,args);
          } else {
            [].push.apply(args,arguments);
            return arguments.callee;// 返回被执行的函数对象
          }
        }
      }
      var cost = (function(){
        var money = 0;
        return function(){
          for(var i = 0,l = arguments.length; i<l; i++){
            money += arguments[i];
          }
          return money;
        }
      })();
      var costCurry = currying(cost);
      console.log(costCurry(100)(200)(300)());
```
#### 4.函数节流（利用定时器原理，减少执行的评率）
```javascript
      var throttle = function (fn,interval) {
        var _self = fn, // 保存需要被延迟执行的函数应用
            timer, // 定时器
            firstTime = true; // 是否是第一次调用
        return function () {
          var args = arguments;
              _me = this;
          if(firstTime){ // 如果是第一次调用，不需要延迟执行
            _self.apply(_me,args);
            return firstTime = false;
          }
          if(timer){// 如果定时器还存在，说明前一次延迟执行还没有完成
            return false;
          }
          timer = setTimeout(function(){
            clearTimeout(timer);
            timer = null;
            _self.apply(_me,args);
          },interval||500)
        }
      }
      window.onresize = throttle(function(){
        console.log(1);
      },500);
```
<!-- SLIDE PAGES V1.0, DO NOT CHANGE THIS LINE. -->
<div $=ScenePage key="auto0"></div>
<div $=ScenePage key="auto1" no-show="1"></div>
